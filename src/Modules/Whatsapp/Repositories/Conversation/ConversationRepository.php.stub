<?php

namespace App\Repositories\Conversation;

use App\Http\Filters\QueryBuilder;
use App\Models\Conversation;
use Illuminate\Http\Request;

class ConversationRepository implements ConversationRepositoryInterface
{
    /**
     * Get paginated results
     *
     * @param Request $request
     * @param int $pageSize
     * @return mixed
     */
    public function getAllPaginated(Request $request, int $pageSize = 20): mixed
    {
        $queryBuilder = new QueryBuilder(new Conversation(), $request);
        return $queryBuilder->build()->paginate($pageSize);
    }

    /**
     * Fin an item by id
     * @param mixed $id
     * @return Model|null
     */
    public function find($id)
    {
        return Conversation::find($id);
    }

    /**
     * find Or Fail
     * @param $id
     * @return mixed
     */
    public function findOrFail($id)
    {
        return Conversation::findOrFail($id);
    }

    /**
     * Return all items
     * @return Collection|null
     */
    public function all()
    {
        return Conversation::all();
    }

    /**
     * Create an item
     * @param array|mixed $data
     * @return Model|null
     */
    public function create($data)
    {
        return Conversation::create($data);
    }

    /**
     * Update a item
     * @param int|mixed $id
     * @param array|mixed $data
     * @return bool|mixed
     */
    public function update($id, array $data)
    {
        return Conversation::findOrFail($id)->update($data);
    }

    /**
     * destroy many item with primary key
     * @param int|Model $id
     */
    public function destroy(array $id)
    {
        return Conversation::destroy($id);
    }

    /**
     * delete item
     * @param Model|int $id
     * @return mixed
     */
    public function delete($id)
    {
        return Conversation::findOrFail($id)->delete();
    }

}
